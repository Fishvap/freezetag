global using Sandbox;
global using Sandbox.UI.Construct;
global using System;
global using System.IO;
global using System.Linq;
global using System.Threading.Tasks;

namespace Freezetag
{
	public partial class Freezetag : Game
	{
		public static bool Debug = false;

		public Freezetag()
		{
			if(IsServer)
			{
				_ = new HUD();
			}
		}

		public override void DoPlayerNoclip(Client player)
		{
			if (!Debug)
				return;

			if (player.Pawn is Player basePlayer)
			{
				if (basePlayer.DevController is NoclipController)
				{
					Log.Info("Noclip Mode Off");
					basePlayer.DevController = null;
				}
				else
				{
					Log.Info("Noclip Mode On");
					basePlayer.DevController = new NoclipController();
				}
			}
		}

		public override void ClientJoined( Client client )
		{
			base.ClientJoined( client );

			// Create a pawn for this client to play with
			var pawn = new BasePlayer( client );
			Client.Pawn = pawn;
			pawn.Respawn();
		}

		public override void ClientDisconnect(Client cl, NetworkDisconnectionReason reason)
		{
			base.ClientDisconnect(cl, reason);
		}
	}
}
